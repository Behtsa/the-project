{"version":3,"sources":["context-provider/selected-character-context.tsx","components/characters/index.tsx","components/loader/index.tsx","components/popup/index.tsx","components/sidebar/index.tsx","components/pagination/index.tsx","constants/api-endpoints.ts","services/http.service.ts","services/api.service.ts","constants/session-keys.ts","services/session-storage.service.ts","containers/characters/index.tsx","App.tsx","serviceWorkerRegistration.js","index.tsx"],"names":["SelectedCharacterContext","createContext","SelectedCharacterContextProvider","children","useState","id","name","status","species","type","gender","origin","link","location","image","episode","url","created","selectedCharacter","setNewCharacter","Provider","value","Characters","characters","useContext","className","map","character","index","onClick","src","alt","Loader","PopUp","popUpTitle","imgSrc","closePopUp","Sidebar","length","Pagination","info","getCharactersPerPage","pageCount","pages","pageRangeDisplayed","marginPagesDisplayed","previousLabel","nextLabel","breakLabel","onPageChange","e","selectedPage","selected","containerClassName","BASE_ENDPOINT","API_ENDPOINTS","CHARACTER","LOCATIONS","EPISODES","HttpService","path","this","request","httpMethod","bodyRequest","headers","requestConfig","method","data","axios","then","customSuccess","catch","customError","response","resultResponse","success","message","Promise","resolve","reject","ApiService","httpService","get","CHARACTERS","SessionStorageService","sessionItem","JSON","parse","sessionStorage","getItem","console","error","setItem","stringify","CharacterContainer","apiService","sessionStorageService","isLoading","isError","results","state","setState","getCharacters","a","useEffect","charactersFromStorage","getSessionItem","saveInfoInStorage","App","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","addEventListener","fetch","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.591735f6.chunk.js","sourcesContent":["import { useState, createContext } from 'react';\n\nexport const SelectedCharacterContext = createContext([] as any); // Todo agregar el array type\n\nexport const SelectedCharacterContextProvider = ({ children }) => {\n    const [selectedCharacter, setNewCharacter] = useState({\n        id: null,\n        name: 'Monserrat Gonz√°lez',\n        status: 'Alive',\n        species: 'Human',\t\n        type: 'Human',\n        gender: 'Female',\n        origin: {\n            name: '',\n            link: ''\n        },\n        location: {\n            name: '',\n            link: ''\n        },\n        image: 'https://media-exp1.licdn.com/dms/image/C5603AQFCFHZ8jCIsKA/profile-displayphoto-shrink_800_800/0/1523332968541?e=1627516800&v=beta&t=VtoQ2C1ATAZiUk6GXMaiqdBu8wJ8ZJj3Fo4PgOanJnI',\n        episode: [],\n        url: '',\n        created: ''\n    });\n\n    return (\n        <SelectedCharacterContext.Provider value={[selectedCharacter, setNewCharacter]}>\n            { children }\n        </SelectedCharacterContext.Provider>\n    );\n};\n","import React, { useContext } from 'react';\nimport { SelectedCharacterContext } from '../../context-provider/selected-character-context';\nimport './index.scss';\n\nconst Characters = ({characters}): React.ReactElement => {\n\n    const [selectedCharacter, setNewCharacter] = useContext(SelectedCharacterContext);\n\n    return(\n        <div className=\"characters__container\">\n            {characters.map( (character, index) => (\n                <div>\n                    <div key={character+index} className=\"characters__container__item\" \n                    onClick={() => setNewCharacter(character)}>\n                        <img src={character.image} alt={character.name}/>\n                    </div>\n                    <p className=\"characters__container__title\">{character.name}</p>\n                </div>\n                ))\n            }\n        </div>\n    );\n}\n\nexport default Characters;\n","import React from 'react';\nimport './index.scss';\n\nconst Loader = (): React.ReactElement => (\n    <div className=\"loader__container\">\n        <div className=\"loader__container__img\">\n            <img src=\"loading.gif\" />\n        </div>\n    </div>\n)\n\nexport default Loader;\n","import React from 'react';\nimport './index.scss';\n\nconst PopUp = ({popUpTitle, imgSrc, closePopUp}): React.ReactElement => {\n    return (\n        <div className=\"popup__container\">\n            <div className=\"popup__container__content\">\n                <h3>{popUpTitle}</h3>\n                <p>Something went wrong, please try again later</p>\n                <div className=\"popup__container__img__wrapper\">\n                    <img src={imgSrc} />\n                </div>\n                <button className=\"popup__container__button\" \n                    onClick={ () => closePopUp() }> Close\n                </button>\n            </div>\n        </div>\n    );\n\n}\n\nexport default PopUp;","import React, { useContext } from 'react';\nimport { SelectedCharacterContext } from '../../context-provider/selected-character-context';\nimport './index.scss';\n\nconst Sidebar = (): React.ReactElement => {\n\n    const [selectedCharacter, setNewCharacter] = useContext(SelectedCharacterContext);\n\n    return (\n        <div className=\"sidebar\">\n            <div className=\"sidebar__image__wrapper\">\n                <img className=\"sidebar__image\" src={selectedCharacter.image} alt={selectedCharacter.name}/>\n            </div>\n            <div className=\"sidebar__title\">\n                <p>{`${selectedCharacter.name}`}</p>\n            </div>\n            <div className=\"sidebar__content\">\n                <p>\n                    <span className=\"sidebar__label\">Status </span> \n                    <span className={`sidebar__status sidebar__status--${selectedCharacter.status}`}></span> \n                    {`${selectedCharacter.status}`}\n                </p>\n                <p>\n                    <span className=\"sidebar__label\">Species </span> \n                    {`${selectedCharacter.species}`}\n                </p>\n                <p>\n                    <span className=\"sidebar__label\">Type </span> \n                    {`${selectedCharacter.type}`}\n                </p>\n                <p>\n                    <span className=\"sidebar__label\">Gender </span> \n                    {`${selectedCharacter.gender}`}\n                </p>\n                <p>\n                    <span className=\"sidebar__label\">Episodes </span> \n                    {`${selectedCharacter.episode.length}`}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Sidebar;","import React from 'react';\nimport ReactPaginate from 'react-paginate';\nimport './index.scss';\n\nconst Pagination = ({info, getCharactersPerPage}): React.ReactElement => {\n\n    const handlePageClick = (e) => {\n        const selectedPage = e.selected;\n        getCharactersPerPage(selectedPage);\n    }\n\n    return (\n        <div className=\"pagination__container\">\n            <ReactPaginate \n            pageCount={info.pages}\n            pageRangeDisplayed={10}\n            marginPagesDisplayed={5}\n            previousLabel={\"ant\"}\n            nextLabel={\"sig\"}\n            breakLabel={\"...\"}\n            onPageChange={handlePageClick}\n            containerClassName={\"pagination\"}\n            />\n        </div>\n    );\n}\n\nexport default Pagination;","const BASE_ENDPOINT = 'https://rickandmortyapi.com/api';\n\nexport const API_ENDPOINTS = {\n    CHARACTER: `${BASE_ENDPOINT}/character`,\n    LOCATIONS: `${BASE_ENDPOINT}/location`,\n    EPISODES: `${BASE_ENDPOINT}/episodes`,\n}\n","import axios, { Method, AxiosRequestConfig, AxiosResponse} from 'axios';\nimport { IHttpResponse } from '../interfaces/services/IHttpResponse';\n\nexport class HttpService {\n\n    /**\n     * Make http get request\n     * @param {string} path \n     * @returns IHttpResponse\n     */\n    public get(path: string): Promise<IHttpResponse> {\n        return this.request('get', path);\n    }\n\n    /**\n     * Fn that makes axios request based on passed parameters\n     * @param {string} httpMethod \n     * @param {string} path \n     * @param {string} bodyRequest \n     * @param {string} headers \n     * @returns IHttpResponse\n     */\n    private request(httpMethod: Method, path: string, bodyRequest?: any, headers?: any): Promise<IHttpResponse> {\n        const requestConfig: AxiosRequestConfig = {\n            method: httpMethod,\n            url: path,\n            data: bodyRequest,\n            headers: headers,\n        };\n        return axios.request(requestConfig)\n        .then(this.customSuccess)\n        .catch(this.customError);\n    }\n\n    /**\n     * Fn that returns a custom successful response\n     * @param response \n     * @returns \n     */\n    private customSuccess(response: AxiosResponse): Promise<IHttpResponse> {\n        const resultResponse: IHttpResponse = {\n            success: true,\n            status: response.status,\n            headers: response.headers,\n            data: response.data,\n            message: 'ok'\n        };\n        return Promise.resolve(resultResponse);\n    }\n\n    /**\n     * Fn that returns a custom error response\n     * @param response \n     * @returns \n     */\n    private customError(response: AxiosResponse): Promise<IHttpResponse> {\n        const resultResponse: IHttpResponse = {\n            success: false,\n            status: 500,\n            headers: {},\n            data: {},\n            message: 'Internal server error'\n        };\n        return Promise.reject(resultResponse);\n    }\n}","import { API_ENDPOINTS } from \"../constants/api-endpoints\";\nimport { IHttpResponse } from \"../interfaces/services/IHttpResponse\";\nimport { HttpService } from \"./http.service\";\n\nexport default class ApiService {\n    private httpService: HttpService;\n\n    constructor() {\n        this.httpService = new HttpService();\n    }\n\n    public getCharacters(selectedPage?: string): Promise<IHttpResponse> {\n        const path = selectedPage ? API_ENDPOINTS.CHARACTER + '/?page=' + selectedPage\n            : API_ENDPOINTS.CHARACTER;\n        return this.httpService.get(path);\n    }\n}","export const CHARACTERS = {\n    CHARACTERS: 'CHARACTERS'\n};\n","import { CHARACTERS } from '../constants/session-keys';\n\nexport default class SessionStorageService {\n\n    /**\n     * Fn that gets parsed session item from storage\n     * @param {string} key \n     */\n    public getSessionItem(): any {\n        let sessionItem = null;\n        try {\n            sessionItem = JSON.parse(sessionStorage.getItem(CHARACTERS.CHARACTERS) || '');\n        } catch {\n            console.error('Error to get characters from storage');\n        }\n        return sessionItem;\n    } \n\n    public saveInfoInStorage(value: any): void {\n        try {\n            sessionStorage.setItem(CHARACTERS.CHARACTERS, JSON.stringify(value));\n        } catch {\n            console.error('Error to save characters in storage');\n        }\n    } \n}\n","import React, { useEffect, useState } from 'react';\n// Components\nimport Characters from '../../components/characters/index';\nimport Loader from '../../components/loader';\nimport PopUp from '../../components/popup';\nimport Sidebar from '../../components/sidebar/index';\nimport Pagination from '../../components/pagination';\n// Services\nimport ApiService from '../../services/api.service';\nimport SessionStorageService from '../../services/session-storage.service';\nimport './index.scss';\n\nconst CharacterContainer = () => {\n\n    const apiService = new ApiService();\n    const sessionStorageService = new SessionStorageService();\n\n    const [state, setState] = useState({\n        isLoading: false,\n        isError: false,\n        info: {},\n        results: []\n    });\n\n    const closePopUp = () => setState({...state, isError: !state.isError})\n    \n\n    const getCharacters = async (selectedPage?: string) => {\n        try {\n            setState({...state, isLoading: true});\n            const characters = await apiService.getCharacters(selectedPage);\n            setState({\n                ...state,\n                isLoading: false,\n                results: characters.data.results,\n                info: characters.data.info\n            });\n        } catch(error) {\n            setState({...state, isLoading: false, isError: true});\n        }\n    }\n\n    useEffect(() => {\n        if (state.results && state.results.length > 0) {\n            const charactersFromStorage = sessionStorageService.getSessionItem();\n            setState({\n                ...state, \n                results: charactersFromStorage.results, \n                info: charactersFromStorage.info\n            })\n        } else {\n            getCharacters();\n        }\n    }, []);\n\n    useEffect(() => {\n        sessionStorageService.saveInfoInStorage({\n            info: state.info,\n            results: state.results\n        })\n    }, [state.results, state.info])\n\n    return (\n        <div>\n            <div className=\"character__container\">\n                {state.isLoading ?  <Loader /> : null}\n                {state.isError ?  \n                    <PopUp popUpTitle=\"Oops!\" imgSrc=\"errorRickMorty.jpeg\" closePopUp={closePopUp}/> \n                : null}\n                <Sidebar />\n                {state.results ? \n                    <Characters characters={state.results}/>\n                    : null\n                }\n            </div>\n            <Pagination info={state.info} getCharactersPerPage={getCharacters}/>\n        </div>\n    );\n}\n\nexport default CharacterContainer;\n","import CharacterContainer from './containers/characters';\nimport { SelectedCharacterContextProvider } from './context-provider/selected-character-context';\nimport './App.scss';\n\nconst App = () => (\n  <div className=\"App\">\n    <SelectedCharacterContextProvider>\n      <CharacterContainer />\n    </SelectedCharacterContextProvider>\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}